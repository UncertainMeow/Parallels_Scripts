#!/usr/bin/env bash
#
# excel-setup-wizard.sh - Interactive wizard for Excel + ODBC setup
# Corporate-grade Excel automation setup
#

set -euo pipefail

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# Banner
show_banner() {
    echo -e "${CYAN}${BOLD}"
    echo "╔════════════════════════════════════════════════╗"
    echo "║   Excel + ODBC Automation Setup Wizard        ║"
    echo "║   Corporate Data Analytics Configuration      ║"
    echo "╚════════════════════════════════════════════════╝"
    echo -e "${NC}"
}

log_info() { echo -e "${BLUE}[INFO]${NC} $1"; }
log_success() { echo -e "${GREEN}[✓]${NC} $1"; }
log_warning() { echo -e "${YELLOW}[!]${NC} $1"; }
log_error() { echo -e "${RED}[ERROR]${NC} $1"; }
log_step() { echo -e "\n${BOLD}${CYAN}▶ $1${NC}\n"; }

# Check prerequisites
check_prerequisites() {
    log_step "Checking Prerequisites"

    # Check for prlctl
    if ! command -v prlctl &>/dev/null; then
        log_error "prlctl not found. Please install Parallels Desktop Pro or Business."
        exit 1
    fi
    log_success "Parallels Desktop CLI available"

    # Check for Python 3.9+
    if command -v python3 &>/dev/null; then
        PY_VERSION=$(python3 --version | awk '{print $2}')
        log_success "Python $PY_VERSION available"
    else
        log_warning "Python 3 not found. Some features may not work."
    fi
}

# List available VMs
list_vms() {
    log_step "Available Virtual Machines"

    prlctl list -a --no-header -o name,status | while IFS= read -r line; do
        name=$(echo "$line" | awk '{print $1}')
        status=$(echo "$line" | awk '{print $2}')

        if [[ "$status" == "running" ]]; then
            echo -e "  ${GREEN}●${NC} $name (${GREEN}running${NC})"
        elif [[ "$status" == "stopped" ]]; then
            echo -e "  ${RED}○${NC} $name (${RED}stopped${NC})"
        else
            echo -e "  ${YELLOW}◐${NC} $name ($status)"
        fi
    done
    echo ""
}

# Select VM
select_vm() {
    log_step "Select Windows VM for Excel"

    read -p "Enter VM name: " VM_NAME

    if ! prlctl list "$VM_NAME" &>/dev/null; then
        log_error "VM not found: $VM_NAME"
        exit 1
    fi

    log_success "Selected VM: $VM_NAME"
}

# Create config file
create_config() {
    log_step "Database Configuration"

    CONFIG_FILE="config/database-connections.yml"

    if [[ -f "$CONFIG_FILE" ]]; then
        log_warning "Config file already exists: $CONFIG_FILE"
        read -p "Overwrite? (y/N) " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            log_info "Keeping existing config"
            return
        fi
    fi

    # Get database details
    echo ""
    echo -e "${BOLD}Metabase/PostgreSQL Configuration:${NC}"
    read -p "  Database host: " DB_HOST
    read -p "  Database port [5432]: " DB_PORT
    DB_PORT=${DB_PORT:-5432}
    read -p "  Database name: " DB_NAME
    read -p "  Username: " DB_USER
    read -p "  DSN Name [Metabase_Production]: " DSN_NAME
    DSN_NAME=${DSN_NAME:-Metabase_Production}

    # Create config from template
    cat > "$CONFIG_FILE" << EOF
# Database Connection Configuration
# Auto-generated by excel-setup-wizard.sh

connections:
  metabase_prod:
    type: postgresql
    driver: "PostgreSQL Unicode(x64)"
    host: "$DB_HOST"
    port: $DB_PORT
    database: "$DB_NAME"
    username: "$DB_USER"
    # Password via environment variable (set with: export METABASE_PASSWORD=...)
    password: "\${METABASE_PASSWORD}"
    dsn_name: "$DSN_NAME"
    ssl_mode: "require"
    description: "Production Metabase analytics database"

# Excel Integration Settings
excel:
  query_timeout: 300
  auto_refresh:
    enabled: true
    interval_minutes: 60

# VM Settings
vm:
  name: "$VM_NAME"
  startup_wait_seconds: 45
  shutdown_after_tasks: false

# Logging
logging:
  level: "INFO"
  file: "logs/excel-automation.log"
  rotate:
    max_size_mb: 100
    keep_files: 10
EOF

    log_success "Config file created: $CONFIG_FILE"

    # Remind about password
    echo ""
    log_warning "Remember to set password environment variable:"
    echo -e "  ${CYAN}export METABASE_PASSWORD='your_password'${NC}"
    echo ""
    echo -e "Add to ~/.zshrc or ~/.bashrc to persist:"
    echo -e "  ${CYAN}echo \"export METABASE_PASSWORD='your_password'\" >> ~/.zshrc${NC}"
}

# Install Python dependencies
install_python_deps() {
    log_step "Installing Python Dependencies"

    if [[ ! -f "python/requirements.txt" ]]; then
        log_warning "requirements.txt not found, skipping"
        return
    fi

    if ! command -v python3 &>/dev/null; then
        log_warning "Python 3 not found, skipping"
        return
    fi

    # Create virtual environment
    if [[ ! -d "python/venv" ]]; then
        log_info "Creating Python virtual environment..."
        python3 -m venv python/venv
    fi

    # Activate and install
    log_info "Installing dependencies..."
    source python/venv/bin/activate
    pip install --quiet --upgrade pip
    pip install --quiet -r python/requirements.txt
    pip install --quiet -e python/

    log_success "Python dependencies installed"
    log_info "Activate with: source python/venv/bin/activate"
}

# Start VM
start_vm() {
    log_step "Starting Windows VM"

    local status=$(prlctl list "$VM_NAME" -o status --no-header | tr -d ' ')

    if [[ "$status" == "running" ]]; then
        log_info "VM is already running"
        return
    fi

    log_info "Starting VM: $VM_NAME"
    prlctl start "$VM_NAME"

    log_info "Waiting for VM to boot (45 seconds)..."
    sleep 45

    log_success "VM is running"
}

# Install ODBC drivers
install_odbc() {
    log_step "Installing ODBC Drivers"

    log_info "This will install PostgreSQL, MySQL, and SQL Server ODBC drivers"
    log_warning "This may take 5-10 minutes"

    read -p "Proceed? (y/N) " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        log_info "Skipping ODBC driver installation"
        return
    fi

    # Use Python CLI if available
    if [[ -f "python/venv/bin/excel-auto" ]]; then
        source python/venv/bin/activate
        excel-auto odbc install-drivers "$VM_NAME" --driver all
    else
        # Fallback to bash script
        if [[ -f "scripts/excel-odbc-setup.sh" ]]; then
            PARALLELS_EXCEL_VM="$VM_NAME" ./scripts/excel-odbc-setup.sh install
        else
            log_warning "No installation script found, skipping"
        fi
    fi
}

# Configure DSN
configure_dsn() {
    log_step "Configuring ODBC DSN"

    if [[ ! -f "config/database-connections.yml" ]]; then
        log_warning "Config file not found, skipping DSN configuration"
        return
    fi

    # Check for password environment variable
    if [[ -z "${METABASE_PASSWORD:-}" ]]; then
        log_warning "METABASE_PASSWORD not set"
        echo ""
        read -p "Enter password (or leave blank to skip): " -s DB_PASSWORD
        echo ""

        if [[ -n "$DB_PASSWORD" ]]; then
            export METABASE_PASSWORD="$DB_PASSWORD"
        else
            log_info "Skipping DSN configuration (no password)"
            return
        fi
    fi

    # Use Python CLI if available
    if [[ -f "python/venv/bin/excel-auto" ]]; then
        source python/venv/bin/activate
        excel-auto odbc configure "$VM_NAME" --connection metabase_prod
    else
        log_warning "Python CLI not found, skipping"
    fi
}

# Show next steps
show_next_steps() {
    echo ""
    echo -e "${GREEN}${BOLD}╔════════════════════════════════════════════════╗${NC}"
    echo -e "${GREEN}${BOLD}║   Setup Complete!                              ║${NC}"
    echo -e "${GREEN}${BOLD}╚════════════════════════════════════════════════╝${NC}"
    echo ""
    echo -e "${BOLD}Next Steps:${NC}"
    echo ""
    echo -e "1. ${BOLD}Test ODBC Connection from Excel:${NC}"
    echo -e "   - Open Excel in Windows VM"
    echo -e "   - Data → Get Data → From ODBC"
    echo -e "   - Select DSN: $DSN_NAME"
    echo -e "   - Enter password when prompted"
    echo ""
    echo -e "2. ${BOLD}Use Python CLI:${NC}"
    echo -e "   ${CYAN}source python/venv/bin/activate${NC}"
    echo -e "   ${CYAN}excel-auto vm list${NC}"
    echo -e "   ${CYAN}excel-auto odbc list \"$VM_NAME\"${NC}"
    echo ""
    echo -e "3. ${BOLD}Create Excel Dashboard:${NC}"
    echo -e "   - Use Power Query to connect to your data"
    echo -e "   - Save workbooks to shared folder"
    echo -e "   - Automate refresh with scheduled tasks"
    echo ""
    echo -e "4. ${BOLD}Documentation:${NC}"
    echo -e "   - Read: ${CYAN}docs/QUICKSTART_EXCEL_SQL.md${NC}"
    echo -e "   - Examples: ${CYAN}docs/WORKFLOWS.md${NC}"
    echo ""
    echo -e "${BOLD}Support:${NC}"
    echo -e "  GitHub: ${CYAN}https://github.com/UncertainMeow/Parallels_Scripts${NC}"
    echo ""
}

# Main execution
main() {
    show_banner

    check_prerequisites
    list_vms
    select_vm
    create_config
    install_python_deps

    read -p "$(echo -e "\n${BOLD}Ready to configure VM? (Y/n)${NC} ")" -n 1 -r
    echo
    if [[ $REPLY =~ ^[Nn]$ ]]; then
        log_info "Setup paused. Run again when ready."
        exit 0
    fi

    start_vm
    install_odbc
    configure_dsn

    show_next_steps
}

# Run if not sourced
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    cd "$(dirname "${BASH_SOURCE[0]}")/.."
    main "$@"
fi
